#!/bin/bash

set -u

if hash docker-machine 2>/dev/null; then
    DOCKER_COMMAND="docker-machine"
else
    DOCKER_COMMAND="boot2docker"
fi

POW_HOST_ROOT=${POW_HOST_ROOT:-$HOME/Library/Application Support/Pow/Hosts}

for_each() {
    while read -r line; do
        [[ -n "$line" ]] || continue
        "$@" $line
    done
}

rm_proxy_conf() {
    local port=$1
    local hostname=$2
    local conf="$POW_HOST_ROOT/$hostname"
    if [[ -e "$conf" && $(cat "$conf") = $port ]]; then
        rm "$conf"
        echo "Removed $conf"
    fi
}

stop_port_forwarding() {
    local port=$1
    pgrep $DOCKER_COMMAND | while read -r pid; do
        if [[ $DOCKER_COMMAND = "docker-machine" ]]; then
            local forwarder="$DOCKER_COMMAND ssh $DOCKER_MACHINE_NAME -N -L $port:0.0.0.0:$port"
        else
            local forwarder="$DOCKER_COMMAND ssh -N -L $port:0.0.0.0:$port"
        fi
        if [[ $(ps -o command= $pid) = "$forwarder" ]]; then
            # Kill ssh spawned by boot2docker ssh.
            # Doing so will terminate boot2docker ssh itself.
            kill_with_ppid $pid
            echo "Stopped forwarding port $port"
        fi
    done
}

kill_with_ppid() {
    local ppid=$1
    ps -o 'ppid=,pid=' | for_each kill_with_ppid_ $ppid
}

kill_with_ppid_() {
    local expected_ppid=$1
    local ppid=$2
    local pid=$3
    if [[ $ppid = $expected_ppid ]]; then
        kill $pid
        echo "Killed ssh with pid $pid"
    fi
}

teardown_domain() {
    local port=$1
    local name=$2
    local hostname=$(sed 's/_/-/g' <<< $name)
    rm_proxy_conf $port $hostname
    stop_port_forwarding $port
    echo "======> http://$hostname.dev has gone"
}

to_port_and_name_list() {
    awk 'NR>1 { print $(NF-1) " " $NF }' | grep -e '->' | sed 's/^.*://; s/->.* / /'
}

filter_by_name() {
    local target_names=$*
    if [[ -z "$target_names" ]]; then
        cat
        return
    fi
    while read -r line; do
        local name=$(cut -d' ' -f2 <<< $line)
        if grep -q " $name " <<< " $target_names "; then
            echo $line
        fi
    done
}

target_names=$*
list=$(docker ps --no-trunc=true | to_port_and_name_list | filter_by_name "$target_names")
for_each teardown_domain <<< "$list"
